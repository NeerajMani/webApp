Hello and welcome to this micro training video on non-functional requirements in performance testing. In this video, we'll discuss the importance of non-functional requirements in performance testing, and how to effectively incorporate them into the testing process.

Identify the purpose of the change: Before you can determine if performance testing is required, you must first understand the purpose of the change. For example, is the change being made to fix a performance issue or to introduce new functionality? The purpose of the change will help you understand if performance testing is required and what type of testing should be conducted.

Define the scope of the change: Once you understand the purpose of the change, you need to define the scope of the change. This includes understanding what parts of the application are impacted by the change, the expected user load, and the expected workload. Defining the scope of the change will help you determine the level of effort required for performance testing.

Evaluate the risks: Evaluate the risks associated with the change. For example, does the change involve adding new functionality that may result in increased user traffic? Or does it involve changes to the application's architecture that may impact performance? By evaluating the risks, you can determine if performance testing is necessary and what type of testing is required.

Consider the timing of the change: Consider the timing of the change and whether there are any upcoming events that may impact user traffic. For example, if the change is being made prior to a major sale or product launch, it may be important to conduct performance testing to ensure that the application can handle the expected user load.

Assess the performance history of the application: Review the performance history of the application to determine if there are any trends or patterns that may indicate a need for performance testing. For example, if the application has experienced performance issues in the past following similar changes, it may be necessary to conduct performance testing.

Analyze the impact on the end user: Consider the impact that the change may have on the end user. For example, will the change result in slower page load times or longer response times? If so, it may be necessary to conduct performance testing to ensure that the application continues to meet user expectations.

By considering these factors, you can assess whether performance testing is needed for a particular change and determine the appropriate level of testing required. This will help to ensure that the application performs optimally and meets the needs of the end user, even as changes are made over time.





Hello and welcome to this training video on designing scenarios for disaster recovery (DR) testing. In this video, we'll discuss what DR testing is, why it's important, and how to effectively design scenarios for this type of testing.

DR testing is a type of testing that simulates a disaster or failure scenario, such as a server crash or data center outage, to ensure that the IT infrastructure can recover and continue to function in the event of such a disaster. DR testing is important because it can help identify and mitigate any weaknesses or vulnerabilities in the IT infrastructure, ensuring that critical business functions can be resumed quickly and smoothly in the event of a disaster.

Hello and welcome to this training video on designing scenarios for failover testing. In this video, we'll discuss what failover testing is, why it's important, and how to effectively design scenarios for this type of testing.

Failover testing is a type of testing that simulates a failure scenario, such as a server crash or network outage, to ensure that the IT infrastructure can failover to a secondary system and continue to function. Failover testing is important because it can help identify and mitigate any weaknesses or vulnerabilities in the IT infrastructure, ensuring that critical business functions can be resumed quickly and smoothly in the event of a failure.

Hello and welcome to this training video on designing scenarios for endurance testing. In this video, we'll discuss what endurance testing is, why it's important, and how to effectively design scenarios for this type of testing.

Endurance testing, also known as longevity testing or soak testing, is a type of performance testing that is used to evaluate how an application or system performs over an extended period of time under sustained load. Endurance testing is important because it helps identify and mitigate any performance or stability issues that may occur over time, ensuring that the application or system can handle sustained usage without experiencing any issues.

Hello and welcome to this training video on designing scenarios for stress testing. In this video, we'll discuss what stress testing is, why it's important, and how to effectively design scenarios for this type of testing.

Stress testing is a type of performance testing that is used to evaluate the behavior of an application or system under extreme load conditions. Stress testing is important because it helps identify and mitigate any performance or stability issues that may occur under high load, ensuring that the application or system can handle the expected workload without experiencing any issues.


Hello and welcome to this training video on result analysis in LoadRunner Enterprise. In this video, we'll discuss how to analyze the results of a performance test that has been executed in LoadRunner Enterprise.

Once a performance test has been executed in LoadRunner Enterprise, the results can be analyzed in the Analysis section of the platform. Here are the steps to analyze the test results:

Open the test results: To access the test results, navigate to the Analysis section of LoadRunner Enterprise and select the relevant test run. This will open the results in the Analysis window.

Identify the key performance indicators: The next step is to identify the key performance indicators (KPIs) that are relevant to the test. KPIs are the metrics that are used to measure the performance of the system under test, such as response time, throughput, and error rate.

Use graphs and reports to visualize the data: LoadRunner Enterprise provides a wide range of graphs and reports that can be used to visualize the test results. Use these tools to analyze the KPIs and identify any trends or patterns in the data.

Compare results to baselines and thresholds: To determine whether the system under test has performed as expected, compare the test results to the baselines and thresholds that were defined prior to the test. Baselines are the performance metrics that were observed in previous tests or in production, while thresholds are the acceptable ranges for the KPIs.

Identify and investigate any issues: If the test results indicate that there are performance issues, use the LoadRunner Enterprise tools to drill down into the data and identify the root cause of the issue. This may involve examining individual transactions, analyzing server logs, or reviewing network traffic.

By following these steps, you can effectively analyze the results of a performance test in LoadRunner Enterprise and identify any performance issues that need to be addressed.
